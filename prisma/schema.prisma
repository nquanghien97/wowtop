generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id                  Int                 @id @default(autoincrement())
  phone_number        String              @unique
  full_name           String?
  mother_dob          String?
  child_dob           String?
  province_id         String?
  province            String?
  district_id         String?
  district            String?
  ward_id             String?
  ward                String?
  address             String?
  password            String
  News                News[]
  role                UserRole            @default(USER)
  points_accumulation Int                 @default(0)
  created_codes       Accumulation_code[] @relation("UserCreatedCodes")
  used_codes          Accumulation_code[] @relation("UserUsedCodes")
  created_at          DateTime            @default(now())

  exchange_gift ExchangedGift[]
}

enum StatusCode {
  UNUSED
  USED
  EXPIRED
}

model Accumulation_code {
  id              Int        @id @default(autoincrement())
  code            String     @unique
  status          StatusCode @default(UNUSED)
  user_id         Int
  user            User       @relation("UserCreatedCodes", fields: [user_id], references: [id])
  used_by_user_id Int?
  user_by         User?      @relation("UserUsedCodes", fields: [used_by_user_id], references: [id])
  used_at         DateTime?
  created_at      DateTime   @default(now())
}

model Order {
  id          Int      @id @default(autoincrement())
  fullName    String
  phoneNumber String
  province    String
  district    String
  ward        String
  address     String
  createdAt   DateTime @default(now())
}

model News {
  id        Int      @id @default(autoincrement())
  title     String
  content   String   @db.LongText
  slug      String   @unique
  imageUrl  String
  authorId  Int
  author    User     @relation(fields: [authorId], references: [id])
  createdAt DateTime @default(now())
}

model HeightCalculator {
  id             Int      @id @default(autoincrement())
  code           String
  parentName     String
  phoneNumber    String
  fatherHeight   String
  motherHeight   String
  province       String
  district       String
  ward           String
  address        String
  fullName       String
  gender         Gender
  date_of_birth  String
  currentHeight  String
  currentWeight  String
  currentProduct String
  sport          String
  timeSleep      String
  createdAt      DateTime @default(now())
}

enum Gender {
  BOY
  GIRL
}

model Gift {
  id         Int      @id @default(autoincrement())
  name       String
  imageUrl   String
  point      Float
  quantity   Float
  created_at DateTime @default(now())

  ExchangeGift ExchangedGift[]
}

enum GiftStatus {
  PENDING    // Chờ xử lý
  SHIPPING   // Đang giao hàng
  COMPLETED  // Giao hàng thành công
  CANCELLED  // Đã hủy
}

model ExchangedGift {
  id                Int      @id @default(autoincrement())
  gift_id           Int
  gift              Gift     @relation(fields: [gift_id], references: [id])
  user_id           Int
  user              User     @relation(fields: [user_id], references: [id])
  status            GiftStatus @default(PENDING)
  delivered_at      DateTime?
  created_at        DateTime @default(now())
}
